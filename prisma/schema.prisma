// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// LMS Models
model User {
  id         String   @id @default(uuid())
  email      String   @unique
  full_name  String
  role       String   // 'admin', 'teacher', 'student'
  avatar_url String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  teacherCourses Course[]      @relation("TeacherCourses")
  enrollments    Enrollment[]
  submissions    Submission[]
}

model Course {
  id          String   @id @default(uuid())
  title       String
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  teacherId   String?
  teacher     User?        @relation("TeacherCourses", fields: [teacherId], references: [id], onDelete: SetNull)
  enrollments Enrollment[]
  coursework  Coursework[]
  resources   CourseResource[]
}

model Enrollment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  studentId String
  student   User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([courseId, studentId])
}

model Coursework {
  id          String   @id @default(uuid())
  title       String
  description String?
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  courseId    String
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  submissions Submission[]
}

model Submission {
  id          String   @id @default(uuid())
  content     String
  fileUrl     String?
  grade       Int?
  feedback    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  courseworkId String
  coursework   Coursework @relation(fields: [courseworkId], references: [id], onDelete: Cascade)
  studentId    String
  student      User       @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([courseworkId, studentId])
}

model CourseResource {
  id          String   @id @default(uuid())
  name        String
  description String?
  fileUrl     String
  fileType    String
  fileSize    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
}
